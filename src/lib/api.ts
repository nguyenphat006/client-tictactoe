import axios, {
    AxiosError,
    AxiosRequestConfig,
    AxiosResponse,
    InternalAxiosRequestConfig,
  } from 'axios';
import { getToken, setToken, removeToken } from './auth';
import { ErrorResponse } from '@/types/base.interface'

  
  // ƒê·ªãnh nghƒ©a URL g·ªëc cho API, l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:4000';
  
  // Bi·∫øn ƒë·ªÉ theo d√µi xem c√≥ ƒëang trong qu√° tr√¨nh refresh token kh√¥ng
  let isRefreshing = false;
  
  // Promise d√πng ƒë·ªÉ gi·ªØ qu√° tr√¨nh refresh hi·ªán t·∫°i
  let refreshPromise: Promise<any> | null = null;
  
  // Th√™m interface m·ªü r·ªông cho config
  interface ExtendedInternalAxiosRequestConfig extends InternalAxiosRequestConfig {
    _retry?: boolean;
  }
  
  //
  // ==================== PUBLIC AXIOS (Kh√¥ng c·∫ßn token) ====================
  //
  // export const publicAxios = axios.create({
  //   baseURL: BASE_URL,
  //   withCredentials: false, // G·ª≠i k√®m cookie n·∫øu c√≥
  // });



export const publicAxios = axios.create({
    baseURL: BASE_URL,
    withCredentials: false // Gi·ªØ n·∫øu c·∫ßn cookie, ho·∫∑c false n·∫øu kh√¥ng c·∫ßn
})

// ‚úÖ Interceptors: handle SUCCESS + ERROR
publicAxios.interceptors.response.use(
    (response: AxiosResponse) => {
        // üü¢ Handle th√†nh c√¥ng
        console.log('‚úÖ API success:', response)
        return response
    },
    (error) => {
        // üî¥ Handle l·ªói
        if (axios.isAxiosError(error)) {
            const errorResponse = error.response?.data as ErrorResponse

            console.error('‚ùå API error:', errorResponse)

            // N√âM RA l·ªói chu·∫©n
            return Promise.reject(errorResponse)
        }

        // Tr∆∞·ªùng h·ª£p kh√¥ng ph·∫£i l·ªói Axios (v√≠ d·ª• m·∫°ng b·ªã m·∫•t)
        return Promise.reject(error)
    }
)


  
  //
  // ==================== REFRESH AXIOS (D√πng ri√™ng ƒë·ªÉ refresh token) ====================
  // Kh√¥ng d√πng interceptor, tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n khi b·ªã l·ªói
  //
  const refreshAxios = axios.create({
    baseURL: BASE_URL,
    withCredentials: true,
    headers: {
      'Content-Type': 'application/json',
    },
  });
  
  //
  // ==================== PRIVATE AXIOS (D√πng cho API c·∫ßn x√°c th·ª±c) ====================
  // C√≥ interceptor ƒë·ªÉ t·ª± ƒë·ªông g·∫Øn token v√†o header
  //
  export const privateAxios = axios.create({
    baseURL: BASE_URL,
    withCredentials: true,
    headers: {
      'Content-Type': 'application/json',
    },
  });
  
  //
  // === Interceptor request: t·ª± ƒë·ªông g·∫Øn Bearer token v√†o header ===
  //
  privateAxios.interceptors.request.use(
    (config: InternalAxiosRequestConfig) => {
      // Ch·ªâ ch·∫°y ·ªü client-side
      if (typeof window !== 'undefined') {
        const token = getToken(); // L·∫•y token t·ª´ Redux store
        if (token && config.headers) {
          config.headers.Authorization = `Bearer ${token}`;
        }
      }
      return config;
    },
    (error) => Promise.reject(error)
  );
  
  //
  // === H√†m retry request sau khi ƒë√£ refresh token th√†nh c√¥ng ===
  //
  const retryRequest = (originalConfig: AxiosRequestConfig): Promise<any> => {
    const newToken = getToken(); // L·∫•y token m·ªõi t·ª´ Redux store
  
    // N·∫øu kh√¥ng c√≥ token m·ªõi, redirect v·ªÅ login
    if (!newToken) {
      window.location.href = '/login';
      return new Promise(() => {});
    }
  
    // G·∫Øn l·∫°i token m·ªõi v√†o request c≈©
    originalConfig.headers = {
      ...originalConfig.headers,
      Authorization: `Bearer ${newToken}`,
    };
  
    return privateAxios(originalConfig);
  };
  
  //
  // === Interceptor response: x·ª≠ l√Ω l·ªói v√† refresh token khi b·ªã 401 / 403 ===
  //
  privateAxios.interceptors.response.use(
    // N·∫øu response th√†nh c√¥ng ‚Üí tr·∫£ v·ªÅ nh∆∞ b√¨nh th∆∞·ªùng
    (response: AxiosResponse) => response,
  
    // N·∫øu response l·ªói
    async (error: AxiosError) => {
      const originalConfig = error.config as ExtendedInternalAxiosRequestConfig;
  
      // N·∫øu kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server (l·ªói m·∫°ng...)
      if (!error.response) {
        console.error('Server not responding:', error.message);
        return Promise.reject(error);
      }
  
      const status = error.response.status;
  
      // Ki·ªÉm tra originalConfig t·ªìn t·∫°i
      if (originalConfig && (status === 401 || status === 403) && !originalConfig._retry) {
        originalConfig._retry = true;
  
        // N·∫øu ƒëang trong qu√° tr√¨nh refresh ‚Üí ch·ªù promise ƒë√≥
        if (isRefreshing) {
          try {
            await refreshPromise;
            return retryRequest(originalConfig); // Sau khi refresh xong th√¨ retry
          } catch (e) {
            window.location.href = '/login'; // N·∫øu refresh th·∫•t b·∫°i
            return new Promise(() => {});
          }
        }
  
        // N·∫øu ch∆∞a refresh ‚Üí b·∫Øt ƒë·∫ßu refresh
        try {
          isRefreshing = true;
  
          // G·ªçi API refresh token
          refreshPromise = refreshAxios.post('/auth/refresh-token');
          const response = await refreshPromise;
  
          const newToken = response.data?.token;
          if (newToken) {
            setToken(newToken); // L∆∞u token m·ªõi v√†o Redux store
          }
  
          return retryRequest(originalConfig); // Retry l·∫°i request c≈©
        } catch (refreshErr) {
          console.warn('Refresh token failed', refreshErr);
          removeToken(); // Xo√° token c≈© t·ª´ Redux store
          window.location.href = '/login'; // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
          return new Promise(() => {});
        } finally {
          // Reset tr·∫°ng th√°i refresh
          isRefreshing = false;
          refreshPromise = null;
        }
      }
  
      // C√°c l·ªói kh√°c kh√¥ng ph·∫£i 401/403 th√¨ reject nh∆∞ b√¨nh th∆∞·ªùng
      return Promise.reject(error);
    }
  );
  